package com.darkoverlordofdata.entitas.demo
/**
 * Entitas Generated Pool Extensions for com.darkoverlordofdata.entitas.demo
 *
 * do not edit this file
 */

import com.darkoverlordofdata.entitas.ecs.Pool
import com.darkoverlordofdata.entitas.ecs.Entity
import com.darkoverlordofdata.entitas.ecs.Matcher

/** Pool: Score methods*/

val Pool.scoreEntity:Entity?
    get() = getGroup(Matcher.Score)?.getSingleEntity()

val Pool.score:ScoreComponent?
    get() = scoreEntity?.score

val Pool.hasScore:Boolean
    get() = scoreEntity != null

fun Pool.setScore(newValue:Float):Entity {
    if (hasScore) throw Exception("Single Entity Exception: Score")
    val entity = createEntity("Score")
    entity.addScore(newValue)
    return entity
}

fun Pool.replaceScore(newValue:Float):Entity {
    var entity = scoreEntity
    if (entity == null)
        entity = setScore(newValue)
    else
        entity.replaceScore(newValue)
    return entity

}
fun Pool.removeScore() {
    destroyEntity(scoreEntity)
}

/** Pool: Firing methods*/

val Pool.firingEntity:Entity?
    get() = getGroup(Matcher.Firing)?.getSingleEntity()

var Pool.isFiring:Boolean
    get() = firingEntity != null
    set(value) {
        val entity = firingEntity
        if (value != (entity != null))
            if (value)
                createEntity("Firing").isFiring = true
            else
                destroyEntity(entity)
    }
